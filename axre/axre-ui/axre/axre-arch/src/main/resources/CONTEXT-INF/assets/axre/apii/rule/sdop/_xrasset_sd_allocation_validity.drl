//created on: Feb 11, 2015
package assets.axre.rule.apii.sdop

//list any import classes here.
import com.concept.ruleengine.model.EphemeralMantle
import com.concept.ruleengine.model.EphemeralFact 
import com.concept.ruleengine.model.EphemeralFactType
import com.concept.ruleengine.reference.dao.ReferenceDAO
import com.concept.ruleengine.dt.model.DecisionTable
import com.concept.ruleengine.reference.mapper.QueryMapper
import com.concept.ruleengine.common.util.AirportMath
import com.concept.ruleengine.common.util.DateUtil
import com.concept.ruleengine.common.util.CustomUtil
import com.concept.ruleengine.common.util.StringUtil
import com.concept.ruleengine.common.util.StringUtil.CustomRegex

import java.sql.Timestamp

//declare any global variables here
global com.concept.ruleengine.reference.dao.ReferenceDAO reference
global com.concept.ruleengine.reference.mapper.QueryMapper mapper
global com.concept.ruleengine.dt.model.DecisionTable decisionTable

function int funcGetDayOfWeek() {
	int dayOfWeek = DateUtil.getDayOfWeek();
	return dayOfWeek == 0 ? 7 : dayOfWeek;
}

function EphemeralMantle initAllocationValidity(EphemeralMantle em, 
	DecisionTable decisionTable, QueryMapper mapper, ReferenceDAO reference){
	em.facts.put("dayOfWeek", funcGetDayOfWeek());
	
	decisionTable.relace("_xdt_sdop_cargoflight");
	if(
		StringUtil.toList(decisionTable.laced().get("LISTVALUE"), 
			StringUtil.CustomRegex.COMMA).contains(em.facts.get("_serviceType"))){
		decisionTable.relace("_xdt_sdop_cargoflightstand");
	}else{
		decisionTable.relace("_xdt_sdop_flightstand");
	}
	decisionTable.set("DAYOFWEEK", em.facts.get("dayOfWeek"));
	decisionTable.set("AIRLINECODE", em.facts.get("_airlineCode"));
	decisionTable.set("CATEGORYCODE", em.facts.get("_categoryCode"));	
	decisionTable.laced();
	em.facts.putList("standList", StringUtil.toList(decisionTable.get("PREFEREDSTAND"), 
		StringUtil.CustomRegex.COMMA));
	em.facts.put("standList:i", 0);
	return em;
}

function EphemeralMantle initiationAvailability(EphemeralMantle em,
	QueryMapper mapper, ReferenceDAO reference){
	
	em.logs("alocation-validity:processing for availability!");	
	mapper.relace("_sqlmap_sd","retrieve_standconflictoperation");
	
	mapper.parameterized("STAND_CODE", em.facts.get("stand:i") );
	mapper.parameterized("AIRCRAFT_VISIT_SEQ", em.facts.get("_visitSeq") );
	Timestamp estOnBlockTime = StringUtil.toTimestamp(em.facts.get("_eta"), "yyyy-MM-dd HH:mm:ss");
	
	mapper.parameterized(
		"EST_ON_BLOCK_TIME_WITH_TIMEBUFFER", 
			DateUtil.toString(
				AirportMath.leapTimestamp(estOnBlockTime, em.facts.getInt("timeBuffer")), 
					"yyyy-MM-dd HH:mm:ss"));
					
	Timestamp estOffBlockTime = StringUtil.toTimestamp(em.facts.get("_etd"), "yyyy-MM-dd HH:mm:ss");
	mapper.parameterized(
		"EST_OFF_BLOCK_TIME_WITH_TIMEBUFFER", 
			DateUtil.toString(
				AirportMath.leapTimestamp(estOffBlockTime, em.facts.getInt("timeBuffer")), 
					"yyyy-MM-dd HH:mm:ss"));
	
	em.facts.putMap("standconflictoperation", reference.getMap(mapper.getQuery()));

	return em;
}

function EphemeralMantle initiationOperability(EphemeralMantle em,
	QueryMapper mapper, ReferenceDAO reference){
	
	em.facts.put("isOperable",false);
	em.logs("alocation-validity:initiated for operability!");
	
	mapper.relace("_sqlmap_sd","retrieve_standinoperation");
	mapper.parameterized("STAND_CODE", em.facts.get("stand:i") );
	mapper.parameterized(
		"INOP_START_TIME", em.facts.get("_eta"));
	mapper.parameterized(
		"INOP_END_TIME", em.facts.get("_etd"));
	
	em.facts.put("standinoperation", reference.get(mapper.getQuery()));
	return em;	
}


rule "alocation-validity:initiation" 
    when
        $em: EphemeralMantle(operationName == "stand-operation",
        	phase == "alocation-validity", 
        		round == 0
    			)
    then
    	$em = initAllocationValidity($em, decisionTable, mapper, reference);
    	$em.setPhase("alocation-validity:initiation");
    	update( $em );
end

rule "alocation-validity:increments" 
    when
        $em: EphemeralMantle(operationName == "stand-operation",
        	phase == "alocation-validity:increments", 
        		round == 0
    		)
    then
    	$em.setPhase("alocation-validity:initiation");
    	$em.facts.put("standList:i", $em.facts.getInt("standList:i") + 1);
    	update( $em );
end

rule "alocation-validity:ends" 
    when
        $em: EphemeralMantle(operationName == "stand-operation",
        	phase == "alocation-validity:initiation", 
        		facts.getList("standList").size() <= facts.getInt("standList:i"),
        			round == 0
    			)
    then
    	$em.logs("alocation-validity:ends with no allocation!!");
    	$em.setPhase("alocation-validity:ends");
end

rule "alocation-validity:availability-stand" 
    when
        $em: EphemeralMantle(operationName == "stand-operation",
        	phase == "alocation-validity:initiation", 
        		facts.getList("standList").size() > facts.getInt("standList:i"),
        			round == 0
    			)
    then
    	$em.facts.put("stand:i", $em.facts.getListItemAt("standList", $em.facts.getInt("standList:i")));
    	$em.logs("Stand allocation check at " + $em.facts.get("stand:i"));
    	$em = initiationAvailability($em, mapper, reference);
    	$em.setPhase("alocation-validity:availability-stand");
    	update( $em );
end



rule "alocation-validity:available" 
    when
        $em: EphemeralMantle(operationName == "stand-operation",
        	phase == "alocation-validity:availability-stand", 
        		(CustomUtil.isNull(facts.getMapItem("standconflictoperation","count")) 
        			|| facts.getMapItemInt("standconflictoperation","count") == 0),
        			round == 0
    			)
    then
    	$em.setPhase("alocation-validity:opearability-stand");
    	$em = initiationOperability($em, mapper, reference);
    	update( $em );
end

rule "alocation-validity:inavailable" 
    when
        $em: EphemeralMantle(operationName == "stand-operation",
        	phase == "alocation-validity:availability-stand", 
        		!CustomUtil.isNull(facts.getMapItem("standconflictoperation","count")),
        			 facts.getMapItemInt("standconflictoperation","count") != 0,
        			round == 0
    			)
    then
    	$em.logs("alocation-validity:inavailable!!, reconciliated with next possibility!"); 
		$em.setPhase("alocation-validity:increments");
		update( $em );
end

rule "alocation-validity:operable" 
    when
        $em: EphemeralMantle(operationName == "stand-operation",
        	phase == "alocation-validity:opearability-stand", 
        		facts.getInt("standinoperation") == 0,
        			round == 0
    			)
    then
    	$em.setPhase("alocation-validity:fitness-stand-initiation");
    	update( $em );
end

rule "alocation-validity:inoperable" 
    when
        $em: EphemeralMantle(operationName == "stand-operation",
        	phase == "alocation-validity:opearability-stand", 
    			facts.getInt("standinoperation") > 0,
        			round == 0
    			)
    then
    	$em.logs("alocation-validity:inoperability!!, reconciliated with next possibility!"); 
		$em.setPhase("alocation-validity:increments");
		update( $em );
end