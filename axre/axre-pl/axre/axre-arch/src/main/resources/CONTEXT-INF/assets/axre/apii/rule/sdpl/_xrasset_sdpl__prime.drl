//created on: Aug 29, 2015
package assets.axre.rule.apii.sdpl

//list any import classes here.

import com.concept.ruleengine.model.EphemeralMantle
import com.concept.ruleengine.common.util.StringUtil
import com.concept.ruleengine.common.util.DateUtil
import com.concept.ruleengine.common.util.CustomUtil

import com.concept.ruleengine.reference.dao.ReferenceDAO
import com.concept.ruleengine.reference.mapper.QueryMapper


global com.concept.ruleengine.reference.dao.ReferenceDAO reference
global com.concept.ruleengine.reference.mapper.QueryMapper mapper

function EphemeralMantle initiation(EphemeralMantle em){
	em.facts.put("timeBuffer", 15);
	
	em.facts.remap("in4", "_type");
	return em;
}

function EphemeralMantle initiationBulkAllocation(EphemeralMantle em,
		QueryMapper mapper, ReferenceDAO reference){

	em.facts.put("onfitnessAssignation", true);
	
	String eta = DateUtil.toString(
    		StringUtil.toTimestamp(em.facts.get("in1"), 
    			"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"), "yyyy-MM-dd HH:mm:ss");
		
	em.facts.put("_inEtd", eta);
	em.facts.remap("in5", "_inSessionId");
	
	mapper.relace("_sqlmap_sdpl","count_bulk_aircraftvisit");
	mapper.parameterized("ETAD",em.facts.get("_inEtd") );
	mapper.parameterized("SESSIONID",em.facts.get("_inSessionId") );
	em.facts.put("bulksize", reference.getInt(mapper.getQuery()));
	
	em.logs("BULK(N) PROCESSING:"+em.facts.get("bulksize"));
	
	em.facts.put("_visitSeq", 0);
	
	em.facts.put("bulkoffset", 0);
	em.facts.put("bulklimit", 10);
	
	return em;
}

rule "initiation-calibration:initiated-phase"
    when
        $em: EphemeralMantle(operationName == "stand-planning",
        	phase == "0000000", 
        		round == 0
    			)
    then
    	$em = initiation($em);
    	$em.setPhase("initiation-calibration:input-validity");
    	update ( $em );
end


//declare any global variables here

/* Note from AION,
 * A: Bulk Processes/Manual 
 * B: Move button / drag and drop / tow flight 
 * C: ?, Conflicts
 */
 
rule "bulk-allocation:determination"
    when
        $em: EphemeralMantle(operationName == "stand-planning",
        	phase == "initiation-calibration:input-validity", 
        		round == 0, facts.get("_type") == "A", 
        			!CustomUtil.isNull(facts.get("in1")),
        			!CustomUtil.isNull(facts.get("in5"))
    			)
    then
    	$em.setPhase("bulk-allocation");
    	$em = initiationBulkAllocation($em, mapper, reference);
    	update( $em );
end

rule "single-validation:determination"
    when
        $em: EphemeralMantle(operationName == "stand-planning",
        	phase == "initiation-calibration:input-validity", 
        		round == 0, facts.get("_type") == "B", 
        			!CustomUtil.isNullOrBlank(facts.get("in0")),
        			!CustomUtil.isNullOrBlank(facts.get("in3"))
    			)
    then
    	$em.setPhase("single-validation");
    	
    	$em.facts.remap("in3", "_visitSeq");
    	$em.facts.remap("in0", "_standCode");
		$em.facts.put("return","ConflictedAllocation!");
    	update( $em );
    	
end


rule "single-allocation:determination"
    when
        $em: EphemeralMantle(operationName == "stand-planning",
        	phase == "initiation-calibration:input-validity", 
        		round == 0, facts.get("_type") == "C", 
        			!CustomUtil.isNull(facts.get("in3"))
    			)
    then
    	$em.setPhase("single-allocation");
    	
    	$em.facts.put("onfitnessAssignation", true);
    	$em.facts.remap("in3", "_visitSeq");
    	$em.facts.put("return","NoAllocationAvailable!");
    	update( $em );
end
